name: Deployment Pipeline

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  detect-and-deploy:
    name: Detect Changed Services and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Identify Changed Services
        id: changes
        run: |
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only origin/main^..origin/main)
          echo "Changed files: $CHANGED_FILES"
          if echo "$CHANGED_FILES" | grep -q '^patient-service/'; then echo "patient-service" >> changes.txt; fi
          if echo "$CHANGED_FILES" | grep -q '^EurekaServer/'; then echo "EurekaServer" >> changes.txt; fi
          if echo "$CHANGED_FILES" | grep -q '^appointment-service/'; then echo "appointment-service" >> changes.txt; fi
          if echo "$CHANGED_FILES" | grep -q '^notification-service/'; then echo "notification-service" >> changes.txt; fi
          echo "::set-output name=changed_services::$(cat changes.txt | tr '\n' ',')"

      # Step 3: Configure AWS Credentials
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # Step 5: Authenticate with EKS
      - name: Authenticate with EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.K8S_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}

      # Step 6: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'  # Use Eclipse Temurin distribution

      # Step 7: Build and Deploy EurekaServer
      - name: Build and Deploy EurekaServer
        if: contains(steps.changes.outputs.changed_services, 'EurekaServer')
        run: |
          cd EurekaServer
          mvn clean package -DskipTests
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/eureka-service:${{ github.sha }} .
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/eureka-service:${{ github.sha }}
          sed -i "s|image: .*/eureka-service:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/eureka-service:${{ github.sha }}|" eureka-deployment.yml
          kubectl annotate deployment eureka-service kubernetes.io/change-cause="Deployed at $(date +'%Y-%m-%d %H:%M:%S')" --overwrite -n meditrack
          kubectl apply -f eureka-deployment.yml -n meditrack
          kubectl apply -f eureka-service.yml -n meditrack

      - name: Deploy Patient Service
        if: contains(steps.changes.outputs.changed_services, 'patient-service')
        run: |
          cd patient-service
          mvn clean package -DskipTests
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/patient-service:${{ github.sha }} .
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/patient-service:${{ github.sha }}
          sed -i "s|image: .*/patient-service:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/patient-service:${{ github.sha }}|" patient-service-deployment.yml
          kubectl annotate deployment patient-service kubernetes.io/change-cause="Deployed at $(date +'%Y-%m-%d %H:%M:%S')" --overwrite -n meditrack
          kubectl apply -f patient-service-deployment.yml -n meditrack
          kubectl apply -f patient-service-service.yml -n meditrack